from scipy.stats import wilcoxon

Traditional = {
    'F1-Score': [0.321, 0.581, 0.508, 0.560, 0.343, 0.393, 0.137, 0.326, 0.658, 0.518, 0.563, 0.547, 0.662, 0.960,
                 0.677, 0.736, 0.767, 0.282, 0.823, 0.806, 0.916, 0.812, 0.647, 0.380, 0.664, 0.712, 0.304, 0.429,
                 0.947]
}

DBN = {
    'F1-Score': [0.293, 0.548, 0.494, 0.577, 0.448, 0.392, 0.158, 0.285, 0.615, 0.486, 0.591, 0.511, 0.709, 0.772,
                 0.622, 0.676, 0.720, 0.387, 0.804, 0.826, 0.884, 0.823, 0.621, 0.366, 0.683, 0.703, 0.322, 0.418,
                 0.879]
}

DPCNN = {
    'F1-Score': [0.312, 0.579, 0.476, 0.549, 0.447, 0.429, 0.216, 0.361, 0.626, 0.473, 0.595, 0.500, 0.714, 0.909,
                 0.641, 0.603, 0.667, 0.263, 0.829, 0.812, 0.661, 0.821, 0.614, 0.392, 0.658, 0.705, 0.320, 0.455,
                 0.819]
}

Node2defect = {
    'F1-Score': [0.340, 0.592, 0.578, 0.642, 0.480, 0.521, 0.300, 0.403, 0.756, 0.543, 0.554, 0.494, 0.631, 0.948,
                 0.642, 0.744, 0.776, 0.272, 0.876, 0.867, 0.926, 0.861, 0.660, 0.440, 0.726, 0.764, 0.697, 0.493,
                 0.942]
}

DTL_DP = {
    'F1-Score': [0.304, 0.703, 0.500, 0.494, 0.382, 0.326, 0.533, 0.533, 0.509, 0.625, 0.667, 0.514, 0.632, 0.813,
                 0.756, 0.781, 0.780, 0.203, 0.840, 0.800, 0.866, 0.873, 0.606, 0.476, 0.653, 0.731, 0.303, 0.372,
                 0.848]
}

CodeBERT = {
    'F1-Score': [0.352, 0.564, 0.480, 0.633, 0.482, 0.364, 0.215, 0.284, 0.731, 0.552, 0.493, 0.551, 0.626, 0.868,
                 0.638, 0.711, 0.752, 0.215, 0.820, 0.739, 0.911, 0.791, 0.785, 0.441, 0.693, 0.802, 0.572, 0.441,
                 0.891]
}

GCN2defect = {
    'F1-Score': [0.302, 0.530, 0.456, 0.642, 0.468, 0.472, 0.243, 0.349, 0.714, 0.559, 0.531, 0.358, 0.545, 0.955,
                 0.664, 0.755, 0.768, 0.290, 0.884, 0.825, 0.920, 0.847, 0.598, 0.355, 0.710, 0.732, 0.683, 0.543,
                 0.895]
}

UDA_DP = {
    'F1-Score': [0.286, 0.727, 0.629, 0.453, 0.623, 0.392, 0.462, 0.300, 0.667, 0.667, 0.690, 0.516, 0.678, 0.789,
                 0.735, 0.667, 0.756, 0.435, 0.882, 0.771, 0.846, 0.808, 0.581, 0.483, 0.571, 0.678, 0.258, 0.343,
                 0.892]
}

MVHR_DP = {
    'F1-Score': [0.446, 0.615, 0.617, 0.665, 0.559, 0.597, 0.370, 0.443, 0.824, 0.617, 0.622, 0.596, 0.703, 0.963,
                 0.720, 0.786, 0.829, 0.321, 0.887, 0.846, 0.947, 0.880, 0.672, 0.439, 0.754, 0.777, 0.712, 0.557,
                 0.954]
}


D_RGCN = {
    'F1-Score': [0.669, 0.714, 0.662, 0.700, 0.544, 0.583, 0.715, 0.540, 0.901, 0.748, 0.767, 0.801, 0.857, 0.985,0.865, 0.848, 0.904, 0.548, 0.930, 0.929, 0.958, 0.926, 0.787, 0.531, 0.773, 0.798, 0.668, 0.672,0.987]
}


def cliffs_delta(lst1, lst2):
    """Calculate Cliff's delta."""
    n = len(lst1) * len(lst2)
    m = sum((x > y) for x in lst1 for y in lst2)
    p = m / n
    return [2 * p - 1]


def calculate_percentage_difference(lst1, lst2):
    """Calculate percentage difference between two lists."""
    return ((sum(lst1) - sum(lst2)) / sum(lst2)) * 100


# 打印结果

for metric in D_RGCN.keys():
    stat, p_value = wilcoxon(D_GCN[metric], GCN2defect[metric])
    print(f"Wilcoxon signed-rank test for {metric}:")
    print(f"Statistic: {stat}")
    print(f"P-value: {p_value}")
    percentage_diff = calculate_percentage_difference(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的百分比差异计算：{percentage_diff}%")
    delta = cliffs_delta(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的 Cliff’s delta 计算：{delta[0]}")
    print("")

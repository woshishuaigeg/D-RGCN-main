from scipy.stats import wilcoxon

Traditional = {
    'MCC': [25.4, 41.2, 34.4, 16.5, 15.4, 20.0, 11.0, 19.5, 51.6, 35.5, 38.9, 39.2, 46.1, -1.0, 38.3, 17.0, 30.4, 16.2,
            44.2, 38.8, 59.0, 27.2, 45.2, 26.6, 20.1, 42.2, 12.1, 33.4, 90.8]
}

DBN = {
    'MCC': [20.6, 32.8, 32.0, 26.2, 31.5, 19.5, 8.9, 18.4, 39.0, 30.9, 36.1, 20.9, 33.6, 10.5, 27.4, 12.5, 40.8, 34.4,
            45.9, 47.2, 40.4, 40.9, 39.6, 19.7, 18.2, 45.6, 32.3, 35.2, 60.2]
}

DPCNN = {
    'MCC': [21.6, 37.9, 29.1, 22.3, 16.3, 11.9, 12.2, 15.0, 41.1, 24.5, 36.2, 40.1, 32.0, 21.0, 28.7, 11.4, 31.0, 13.2,
            45.7, 47.9, 29.1, 36.9, 35.5, 21.6, 22.3, 46.5, 45.2, 40.1, 66.1]
}

Node2defect = {
    'MCC': [25.9, 42.3, 44.4, 38.1, 38.9, 38.6, 19.0, 30.5, 63.0, 36.1, 39.7, 30.8, 43.6, -1.5, 37.0, 26.6, 35.4, 16.3,
            65.6, 61.6, 66.5, 55.9, 49.1, 32.3, 41.5, 53.4, 64.9, 40.6, 83.8]
}

DTL_DP = {
    'MCC': [22.1, 20.4, 39.4, 13.6, 10.9, 15.3, 52.4, 47.8, 48.2, 51.0, 47.0, 33.0, 38.4, 20.4, 36.8, 37.0, 52.3, 17.3,
            35.0, 36.0, 39.6, 55.8, 34.0, 37.6, 9.6, 48.6, 14.2, 24.8, 58.1]
}

CodeBERT = {
    'MCC': [21.0, 32.2, 38.2, 20.2, 22.6, 22.6, 16.2, 16.0, 48.1, 27.5, 36.6, 0.8, 32.1, 12.3, 25.0, 25.9, 10.8, 11.3,
            35.3, 34.1, 11.1, 39.5, 29.4, 25.6, 27.4, 35.7, 42.1, 32.1, 42.4]
}

GCN2defect = {
    'MCC': [21.5, 32.5, 25.7, 38.3, 34.6, 31.6, 21.1, 27.6, 56.7, 39.6, 34.3, 12.3, 30.6, 4.3, 29.6, 30.3, 30.5, 17.8,
            65.6, 44.1, 62.9, 49.3, 34.2, 21.4, 37.6, 47.2, 63.5, 46.8, 70.2]
}

UDA_DP = {
    'MCC': [17.9, 44.4, 42.7, 25.0, 44.9, 29.1, 39.8, 23.1, 52.4, 57.1, 58.7, 38.7, 47.9, 35.6, 47.9, 44.0, 35.6, 46.2,
            64.6, 49.6, 54.3, 54.6, 38.7, 40.6, 31.0, 36.1, 48.6, 42.7, 55.6]
}

MVHR_DP = {
    'MCC': [38.7, 46.2, 50.2, 44.0, 46.0, 48.0, 33.3, 37.5, 72.8, 47.7, 47.5, 46.4, 55.3, 41.7, 42.1, 35.9, 49.9, 21.5,
            65.1, 51.4, 76.7, 63.8, 49.6, 32.4, 48.7, 56.8, 66.2, 48.5, 86.9]
}

D_RGCN = {
    'MCC': [63.9, 61.0, 56.0, 50.8, 44.3, 46.7, 71.4, 50.3, 85.5, 67.0, 68.9, 74.6, 79.9, 76.9, 75.5, 61.9, 75.5, 49.5,
            81.4, 79.8, 83.1, 77.3, 67.9, 44.1, 56.1, 64.8, 61.2, 61.9, 96.4]
}

def cliffs_delta(lst1, lst2):
    """Calculate Cliff's delta."""
    n = len(lst1) * len(lst2)
    m = sum((x > y) for x in lst1 for y in lst2)
    p = m / n
    return [2 * p - 1]


def calculate_percentage_difference(lst1, lst2):
    """Calculate percentage difference between two lists."""
    return ((sum(lst1) - sum(lst2)) / sum(lst2)) * 100


# 打印结果

for metric in D_RGCN.keys():
    stat, p_value = wilcoxon(D_GCN[metric], GCN2defect[metric])
    print(f"Wilcoxon signed-rank test for {metric}:")
    print(f"Statistic: {stat}")
    print(f"P-value: {p_value}")
    percentage_diff = calculate_percentage_difference(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的百分比差异计算：{percentage_diff}%")
    delta = cliffs_delta(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的 Cliff’s delta 计算：{delta[0]}")
    print("")

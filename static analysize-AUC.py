# import scipy
# from scipy.stats import wilcoxon
# import numpy as np
#
# method1_scores = {
#     'F1': [0.761222617, 0.777913572, 0.860681798, 0.932281701, 0.939172123, 0.891364364, 0.875508546,0.814510146],
#     'AUC': [0.926497449, 0.934825951, 0.964578818, 0.950761783, 0.964787379, 0.980158815, 0.950630602,0.970469105],
#     'Accuracy': [0.887273396, 0.900970539, 0.929237071, 0.918726953, 0.921133387, 0.923710145, 0.888780488, 0.954414487],
#     'MCC': [0.693269356, 0.721666146, 0.817585554, 0.829782431, 0.826973146, 0.837568569, 0.776981867,0.801304019]
# }
# method2_scores = {
#     'F1': [0.566822133, 0.399462133, 0.60611298, 0.734073815, 0.80163484, 0.548249829, 0.637843216,0.363889489],
#     'AUC': [0.817309168, 0.673135964, 0.818966619, 0.669909947, 0.798398044, 0.710411898, 0.777664336,0.757573911],
#     'Accuracy': [0.760395293, 0.683763364, 0.795422427, 0.600588235, 0.730772521, 0.647304348, 0.709268293,0.784032193],
#     'MCC': [0.433262898, 0.216587637, 0.481656926, 0.072341641, 0.388429814, 0.299776482, 0.416667121,0.288300872]
# }#tra
# # method2_scores = {
# #     'F1': [0.697073133, 0.595576951, 0.756080885, 0.86910764, 0.894099423, 0.814617242, 0.809665649],
# #     'AUC': [0.904107502, 0.864042865, 0.933505527, 0.911418504, 0.925043516, 0.943793338, 0.90651611],
# #     'Accuracy': [0.862322118, 0.838734854, 0.880358423, 0.845074627, 0.864036354, 0.871111111, 0.828292683],
# #     'MCC': [0.610458092, 0.497500956, 0.684459119, 0.679936362, 0.70453932, 0.724672332, 0.653483341]
# # }
#
#
# def calculate_statistic(data1, data2):
#     # This function now returns a single scalar value (Cliff's delta)
#     return cliffs_delta(data1, data2)[0]
#
# def cliffs_delta(lst1, lst2):
#     """Calculate Cliff's delta."""
#     n = len(lst1) * len(lst2)
#     m = sum((x > y) for x in lst1 for y in lst2)
#     p = m / n
#     return [2 * p - 1]
#
# def calculate_percentage_difference(lst1, lst2):
#     """Calculate percentage difference between two lists."""
#     return ((sum(lst1) - sum(lst2)) / sum(lst2)) * 100
#
# def calculate_cohens_d(lst1, lst2):
#     """Calculate Cohen's d."""
#     n1, n2 = len(lst1), len(lst2)
#     mean1, mean2 = np.mean(lst1), np.mean(lst2)
#     var1, var2 = np.var(lst1, ddof=1), np.var(lst2, ddof=1)
#     pooled_sd = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
#     return (mean1 - mean2) / pooled_sd
#
# def calculate_effect_size_r(z_score, n):
#     """Calculate effect size (r) from Z-score."""
#     return z_score / np.sqrt(n)
#
# def bootstrap_statistic(data1, data2, statistic, num_samples=1000):
#     combined_data = np.concatenate([data1, data2])
#     observed_statistic = statistic(data1, data2)
#
#     bootstrap_statistics = []
#     for _ in range(num_samples):
#         bootstrap_sample = np.random.choice(combined_data, size=len(combined_data), replace=True)
#         bootstrap_stat = statistic(bootstrap_sample[:len(data1)], bootstrap_sample[len(data1):])
#         bootstrap_statistics.append(bootstrap_stat)
#
#     # Convert to numpy array for element-wise comparison
#     bootstrap_statistics = np.array(bootstrap_statistics)
#     observed_statistic = np.array(observed_statistic)
#
#     p_value = (np.sum(bootstrap_statistics >= observed_statistic) + 1) / (num_samples + 1)
#
#     return p_value
#
# for metric in method1_scores.keys():
#     p_value = bootstrap_statistic(method1_scores[metric], method2_scores[metric], calculate_statistic)
#     print(f"对指标 '{metric}' 进行的 Bootstrap 检验：p值 {p_value}")
#
#     # p_value = wilcoxon(method1_scores[metric], method2_scores[metric])
#     # print(f"对指标 '{metric}' 进行的 wilcoxon 检验：p值 {p_value}")
#
#     delta = cliffs_delta(method1_scores[metric], method2_scores[metric])
#     print(f"对指标 '{metric}' 进行的 Cliff’s delta 计算：{delta[0]}")
#
#     percentage_diff = calculate_percentage_difference(method1_scores[metric], method2_scores[metric])
#     print(f"对指标 '{metric}' 进行的百分比差异计算：{percentage_diff}%")
#
#     cohens_d = calculate_cohens_d(method1_scores[metric], method2_scores[metric])
#     print(f"对指标 '{metric}' 进行的 Cohen's d 计算：{cohens_d}")
#
#     z_score = wilcoxon(method1_scores[metric], method2_scores[metric], alternative='greater')[0]
#     effect_size_r = calculate_effect_size_r(z_score, len(method1_scores[metric]) + len(method2_scores[metric]))
#     print(f"对指标 '{metric}' 进行的效应大小 (r) 计算：{effect_size_r}")


from scipy.stats import wilcoxon

# Method 1 data
# method1 = {
#     'F1': [0.761222617, 0.777913572, 0.860681798, 0.932281701, 0.939172123, 0.891364364, 0.875508546,0.814510146],
#     'AUC': [0.926497449, 0.934825951, 0.964578818, 0.950761783, 0.964787379, 0.980158815, 0.950630602,0.970469105],
#     'Accuracy': [0.887273396, 0.900970539, 0.929237071, 0.918726953, 0.921133387, 0.923710145, 0.888780488, 0.954414487],
#     'MCC': [0.693269356, 0.721666146, 0.817585554, 0.829782431, 0.826973146, 0.837568569, 0.776981867,0.801304019]
# }#d-rgcn
# method2 = {
#     'F1': [0.566822133, 0.399462133, 0.60611298, 0.734073815, 0.80163484, 0.548249829, 0.637843216,0.363889489],
#     'AUC': [0.817309168, 0.673135964, 0.818966619, 0.669909947, 0.798398044, 0.710411898, 0.777664336,0.757573911],
#     'Accuracy': [0.760395293, 0.683763364, 0.795422427, 0.600588235, 0.730772521, 0.647304348, 0.709268293,0.784032193],
#     'MCC': [0.433262898, 0.216587637, 0.481656926, 0.072341641, 0.388429814, 0.299776482, 0.416667121,0.288300872]
# }#tra
#
# # 新的数据
# method3 = {
#     'F1': [0.556251377, 0.489822595, 0.627333551, 0.756838592, 0.840268471, 0.539431565, 0.69655745,0.385096112],
#     'AUC': [0.811656504, 0.757507651, 0.849462829, 0.746270749, 0.853925453, 0.722968333, 0.833144872,0.786712532],
#     'Accuracy': [0.776716308, 0.769398336, 0.810386039, 0.680403863, 0.794085684, 0.670241546, 0.747881137,0.827511387],
#     'MCC': [0.429474651, 0.353593671, 0.508047862, 0.31241421, 0.552420347, 0.318274009, 0.491786253,0.307186004],
# }#node2vec
#
# method4 = {
#     'F1': [0.622154487, 0.60973056, 0.627394046, 0.835345596, 0.851912653, 0.768284025, 0.739152428,0.522696045],
#     'AUC': [0.856746102, 0.865838576, 0.879542718, 0.882661892, 0.889210531, 0.906923602, 0.869832464,0.894154933],
#     'Accuracy': [0.791332966, 0.793031599, 0.7640553, 0.795856014, 0.812536755, 0.831342995, 0.770487805,0.844418511],
#     'MCC': [0.507810606, 0.506298243, 0.491017425, 0.574220509, 0.595938049, 0.649242946, 0.537694536,0.484840729]
# }#gcn
#
# method5 = {
#     'F1': [0.557072852, 0.536851886, 0.598976278, 0.820421475, 0.843986916, 0.764825132, 0.741540384,0.462247095],
#     'AUC': [0.809602756, 0.819091684, 0.84334558, 0.829567639, 0.890240927, 0.884131157, 0.862370111,0.875519593],
#     'Accuracy': [0.73954955, 0.743406985, 0.735750128, 0.770895522, 0.799572307, 0.822086957, 0.766341463,0.823380282],
#     'MCC': [0.416175478, 0.405783303, 0.453726506, 0.517081579, 0.564578548, 0.639439724, 0.53266611,0.409594581]
# }#gat
#
# method6 = {
#     'F1': [0.697073133, 0.595576951, 0.756080885, 0.86910764, 0.894099423, 0.814617242, 0.809665649,0.614141171],
#     'AUC': [0.904107502, 0.864042865, 0.933505527, 0.911418504, 0.925043516, 0.943793338, 0.90651611,0.883791425],
#     'Accuracy': [0.862322118, 0.838734854, 0.880358423, 0.845074627, 0.864036354, 0.871111111, 0.828292683,0.912273642],
#     'MCC': [0.610458092, 0.497500956, 0.684459119, 0.679936362, 0.70453932, 0.724672332, 0.653483341,0.577219139]
# }#graphsage
#
# method7 = {
#     'F1': [0.705319868, 0.66107181, 0.805293645, 0.891231869, 0.906159682, 0.823852774, 0.844634169,0.713102902],
#     'AUC': [0.887851953, 0.88516213, 0.954814138, 0.922287575, 0.946079513, 0.949906029, 0.935487162,0.938586579],
#     'Accuracy': [0.844692039, 0.856802091, 0.902908346, 0.869438104, 0.88117081, 0.879884058, 0.86,0.932780684],
#     'MCC': [0.569688015, 0.574369842, 0.746566451, 0.729410332, 0.74371348, 0.737870519, 0.718802274,0.685105904]
# }#RGCN
#
# method8 = {
#     'F1': [0.655833487, 0.621814408, 0.663059133, 0.84602085, 0.882687482, 0.799560576, 0.779025538,0.566036845],
#     'AUC': [0.887356237, 0.892700304, 0.909055973, 0.895092156, 0.918045825, 0.892290636, 0.892202808,0.947981661],
#     'Accuracy': [0.818128332, 0.796076265, 0.810424987, 0.811966637, 0.850601443, 0.85163285, 0.805365854,0.854672032],
#     'MCC': [0.551814555, 0.523357209, 0.549881971, 0.604634802, 0.676709853, 0.688946277, 0.607598516,0.545531176]
# }#d-gcn
#
# method9 = {
#     'F1': [0.640063466, 0.606486756, 0.6656872, 0.864478516, 0.86350931, 0.8116939, 0.762204677,0.487443879],
#     'AUC': [0.882923889, 0.862225819, 0.90851535, 0.889395671, 0.90154839, 0.911881469, 0.863815023,0.916018315],
#     'Accuracy': [0.776126126, 0.776278213, 0.795422427, 0.831940299, 0.825014702, 0.853468599, 0.782439024,0.780635815],
#     'MCC': [0.52225075, 0.507786033, 0.554386847, 0.648086172, 0.625744916, 0.712329273, 0.563707774,0.472491064]
# }#d-gat
#
# method10 = {
#     'F1': [0.631955441, 0.577197022, 0.627566739, 0.857106475, 0.864932569, 0.803213148, 0.762498798,0.483790515],
#     'AUC': [0.883310131, 0.86183564, 0.871691155, 0.888592344, 0.901828931, 0.908701069, 0.862963681,0.917184539],
#     'Accuracy': [0.776947968, 0.753420052, 0.756999488, 0.822475856, 0.826928629, 0.849043478, 0.782195122,0.781215292],
#     'MCC': [0.529419386, 0.470062608, 0.498157406, 0.630931704, 0.622275643, 0.697714289, 0.562452111,0.466377486]
# }#d-gat-smote
#
# method11 = {
#     'F1': [0.621390527, 0.568944863, 0.603107732, 0.860188559, 0.857034648, 0.799988024, 0.762490663,0.470254721],
#     'AUC': [0.883520485, 0.861820927, 0.864749195, 0.888854063, 0.89914567, 0.912032375, 0.863765006,0.91184798],
#     'Accuracy': [0.754956794, 0.727978142, 0.722283666, 0.826110623, 0.817647688, 0.844811594, 0.781707317,0.763541247],
#     'MCC': [0.520648542, 0.464631059, 0.461003395, 0.63547584, 0.607902542, 0.698818728, 0.562131423,0.456726596]
# }#d-gat-ada
#
#
# method12 = {
#     'F1': [0.621162949, 0.563230486, 0.611289769, 0.857899214, 0.859886906, 0.787552461, 0.759909262,0.486980047],
#     'AUC': [0.864203206, 0.857607812, 0.852814771, 0.888628761, 0.899477253, 0.892537516, 0.86361741,0.911883824],
#     'Accuracy': [0.759352822, 0.72424804, 0.723328213, 0.824381036, 0.819492114, 0.827072464, 0.78,0.785746479],
#     'MCC': [0.520697363, 0.456714638, 0.475799061, 0.631479937, 0.608683504, 0.677380151, 0.559733519,0.466666038]
# }#d-gat-bds
#
#
# method13 = {
#     'F1': [0.74880392, 0.773113788, 0.855670065, 0.931172884, 0.934818532, 0.89004241, 0.879396399,0.790472234],
#     'AUC': [0.924439919, 0.928211909, 0.95601331, 0.952601102, 0.963528437, 0.974619394, 0.950006243,0.976143178],
#     'Accuracy': [0.876126126, 0.898796626, 0.927352791, 0.918718174, 0.916482224, 0.920985507, 0.891219512,0.949279678],
#     'MCC': [0.674750962, 0.715604538, 0.812851652, 0.831738937, 0.817325875, 0.832215967, 0.780978298,0.769131729]
# }#d-rgcn-smote
#
#
# method14 = {
#     'F1': [0.666913209, 0.695047255, 0.803647926, 0.933094268, 0.937558362, 0.889194473, 0.877692102,0.73460057],
#     'AUC': [0.915589751, 0.919663019, 0.947254817, 0.950379094, 0.96347958, 0.975170886, 0.950677315,0.9720015],
#     'Accuracy': [0.808087884, 0.840906391, 0.890035842, 0.919850746, 0.919759423, 0.921082126, 0.889756098,0.926478873],
#     'MCC': [0.573337055, 0.622386564, 0.742956133, 0.832267468, 0.824142269, 0.834399929, 0.777757219,0.718380627]
# }#d-rgcn-ada
#
# method15 = {
#     'F1': [0.676050039, 0.727160889, 0.81539134, 0.931853799, 0.93528574, 0.890249165, 0.877267124,0.748627169],
#     'AUC': [0.900535514, 0.914151982, 0.94533026, 0.949984958, 0.964254027, 0.971426842, 0.950702065,0.97530359],
#     'Accuracy': [0.824646075, 0.865728201, 0.904833589, 0.918735733, 0.916952686, 0.920869565, 0.889512195,0.939002012],
#     'MCC': [0.581993448, 0.660409407, 0.759707705, 0.830023129, 0.820220114, 0.838713649, 0.777622273,0.733157695]
# }#d-rgcn-bds
#
#
# method16 = {
#     'F1': [0.640050898, 0.586259079, 0.654314211, 0.838372161, 0.882868293, 0.780631877, 0.780880546,0.577803743],
#     'AUC': [0.876232991, 0.876995836, 0.901634422, 0.896670369, 0.91567166, 0.913851629, 0.891807302,0.949216104],
#     'Accuracy': [0.801355028, 0.763215728, 0.807076293, 0.802888499, 0.850580059, 0.839613527, 0.805853659,0.856362173],
#     'MCC': [0.532802745, 0.481349211, 0.536291598, 0.595455005, 0.673170881, 0.662217096, 0.608579068,0.556074693]
# }#d-gcn-smote
#
# method17 = {
#     'F1': [0.616440774, 0.576584506, 0.608315798, 0.844461395, 0.882153246, 0.764484307, 0.781398136,0.524572682],
#     'AUC': [0.873205956, 0.873639166, 0.894510381, 0.891559102, 0.916780491, 0.907412558, 0.892421039,0.950728353],
#     'Accuracy': [0.768019857, 0.735994298, 0.711920123, 0.810658472, 0.850120289, 0.814937198, 0.807560976,0.81934004],
#     'MCC': [0.504426523, 0.477069401, 0.476171618, 0.603047773, 0.67578672, 0.634517396, 0.611837185,0.512450514]
# }#d-gcn-ada
#
# method18 = {
#     'F1': [0.618388874, 0.581773056, 0.60891028, 0.842393719, 0.879570986, 0.743130877, 0.781709481,0.59613176],
#     'AUC': [0.874586865, 0.859269127, 0.901728417, 0.894466749, 0.916120436, 0.906996278, 0.891102271,0.936122874],
#     'Accuracy': [0.770737268, 0.737747684, 0.712534562, 0.806558385, 0.845918204, 0.79636715, 0.804634146,0.81934004],
#     'MCC': [0.5084555, 0.483736339, 0.475074432, 0.602775805, 0.668877152, 0.600586029, 0.605726192,0.512450514]
# }#d-gcn-bds
#
# Traditional = {
#     'AUC': [0.693,0.722,0.818,0.830,0.827,0.838,0.777],
# }
#
# DBN = {
#     'AUC': [0.433,0.217,0.482,0.072,0.388,0.300,0.417],
# }

Traditional = {
    'AUC': [78.4, 80.1, 80.2, 65.0, 68.9, 68.4, 65.8, 71.7, 84.4, 78.4, 81.0, 81.1, 82.1, 68.6, 76.9, 62.6, 76.6, 66.4,
            82.1, 80.8, 75.1, 74.8, 78.2, 76.5, 67.6, 80.3, 64.3, 79.0, 97.9],
}

DBN = {
    'AUC': [66.2, 68.0, 68.7, 63.4, 70.3, 62.1, 58.7, 64.5, 70.1, 68.3, 68.7, 67.8, 70.0, 70.1, 63.8, 56.1, 71.6, 76.5,
            73.1, 74.6, 72.1, 70.9, 71.2, 62.8, 59.1, 72.8, 82.3, 80.1, 91.1],
}

DPCNN = {
    'AUC': [66.5, 70.8, 67.5, 61.5, 60.6, 57.2, 64.7, 61.9, 71.8, 64.0, 68.9, 69.9, 72.3, 59.7, 64.4, 55.9, 65.9, 59.4,
            73.7, 74.7, 66.4, 68.8, 68.7, 65.3, 61.1, 73.3, 85.4, 77.4, 92.3],
}

Node2defect = {
    'AUC': [77.3, 79.2, 81.2, 77.2, 81.1, 80.4, 70.0, 77.8, 88.3, 77.2, 80.9, 77.3, 77.7, 65.8, 73.5, 69.2, 79.2, 63.3,
            81.6, 89.2, 91.0, 86.0, 81.2, 77.1, 78.0, 85.3, 90.4, 83.6, 86.0],
}

DTL_DP = {
    'AUC': [61.7, 81.0, 70.1, 56.4, 64.0, 62.5, 91.1, 83.5, 71.8, 73.0, 72.4, 67.5, 61.7, 73.0, 65.8, 67.3, 75.4, 57.9,
            64.0, 60.0, 39.5, 76.4, 67.3, 50.4, 50.0, 74.1, 59.8, 66.7, 74.7],
}

CodeBERT = {
    'AUC': [62.4, 72.8, 77.8, 67.0, 65.6, 66.2, 65.9, 58.8, 66.5, 68.1, 73.3, 69.9, 70.1, 62.2, 67.5, 60.6, 57.0, 59.7,
            82.6, 64.7, 57.8, 61.3, 64.5, 74.9, 54.0, 75.0, 86.8, 83.2, 90.1],
}

GCN2defect = {
    'AUC': [71.8, 73.3, 71.6, 78.6, 78.0, 76.4, 70.5, 78.4, 84.7, 79.1, 75.2, 58.6, 71.2, 81.2, 71.1, 69.1, 71.9, 66.8,
            91.3, 83.6, 89.6, 83.3, 74.7, 69.2, 76.8, 82.1, 93.0, 88.0, 94.0],
}

UDA_DP = {
    'AUC': [70.7, 73.3, 75.5, 67.2, 80.7, 74.4, 75.2, 79.6, 81.3, 80.9, 77.7, 65.8, 71.0, 65.6, 69.1, 60.8, 66.5, 80.7,
            80.0, 61.2, 76.0, 81.4, 78.8, 76.2, 65.1, 59.9, 70.9, 84.7, 90.9],
}

MVHR_DP = {
    'AUC': [82.5, 82.5, 84.5, 82.1, 83.9, 84.9, 80.5, 88.2, 93.1, 83.9, 86.3, 84.3, 80.1, 76.3, 80.1, 72.9, 82.8, 79.5,
            91.7, 87.7, 95.2, 89.2, 84.1, 79.2, 82.4, 87.6, 93.8, 88.7, 98.2],
}

D_RGCN = {
    'AUC': [91.9, 87.9, 89.6, 86.0, 85.3, 84.9, 97.7, 89.2, 97.2, 93.9, 94.0, 96.1, 95.4, 93.7, 93.4, 88.3, 93.0, 86.5,
            96.7, 96.2, 96.8, 93.8, 91.7, 82.8, 85.1, 90.4, 92.3, 92.1, 99.4]
}



def cliffs_delta(lst1, lst2):
    """Calculate Cliff's delta."""
    n = len(lst1) * len(lst2)
    m = sum((x > y) for x in lst1 for y in lst2)
    p = m / n
    return [2 * p - 1]


def calculate_percentage_difference(lst1, lst2):
    """Calculate percentage difference between two lists."""
    return ((sum(lst1) - sum(lst2)) / sum(lst2)) * 100


# 打印结果

for metric in D_RGCN.keys():
    stat, p_value = wilcoxon(D_GCN[metric], GCN2defect[metric])
    print(f"Wilcoxon signed-rank test for {metric}:")
    print(f"Statistic: {stat}")
    print(f"P-value: {p_value}")
    percentage_diff = calculate_percentage_difference(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的百分比差异计算：{percentage_diff}%")
    delta = cliffs_delta(D_GCN[metric], GCN2defect[metric])
    print(f"对指标 '{metric}' 进行的 Cliff’s delta 计算：{delta[0]}")
    print("")
